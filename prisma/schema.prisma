generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  contact   String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  // Created tasks
  createdTasks Task[] @relation("TaskCreator")

  // Assigned tasks
  assignedTasks Task[] @relation("TaskAssignee")

  projects    Project[]    @relation("UserProjects")
  costReports CostReport[]
}

enum Role {
  ADMIN
  USER
}

model Project {
  id              Int      @id @default(autoincrement())
  title           String
  location        String
  startDate       DateTime
  expectedEndDate DateTime
  budget          Float
  image           String
  createdAt       DateTime @default(now())

  userId Int
  owner  User @relation("UserProjects", fields: [userId], references: [id])

  subprojects SubProject[]
  costItems   CostItem[]
  milestones  Milestone[]
  tasks       Task[]
  costReports CostReport[]
}

model SubProject {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  costItems   CostItem[]
  tasks       Task[]
  costReports CostReport[]
}

model Milestone {
  id      Int      @id @default(autoincrement())
  title   String
  dueDate DateTime
  status  String // You can convert this to enum if you prefer

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())

  costItems CostItem[]
}

model CostItem {
  id            String     @id @default(cuid())
  itemName      String
  contractor    String?
  date          DateTime
  estimatedCost Float
  actualCost    Float?
  status        CostStatus
  floorPhase    String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  subprojectId String?
  subproject   SubProject? @relation(fields: [subprojectId], references: [id])
  notes        String?
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  priority Priority @default(MEDIUM)
  isUrgent Boolean  @default(false)

  subprojectId String?
  subproject   SubProject? @relation(fields: [subprojectId], references: [id])

  // Creator of the task
  creatorId Int
  creator   User @relation("TaskCreator", fields: [creatorId], references: [id])

  // Assigned to user
  assignedToId Int?
  assignedTo   User? @relation("TaskAssignee", fields: [assignedToId], references: [id])

  @@index([projectId])
  @@index([subprojectId])
  @@index([status])
  @@index([dueDate])
  @@index([assignedToId])
  @@index([creatorId])
  @@index([priority])
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum CostStatus {
  Pending
  Approved
  Paid
  OnHold
  Cancelled
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
}

model CostReport {
  id               String     @id @default(cuid())
  publicId         String
  url              String
  originalFilename String
  format           String
  uploadedAt       DateTime   @default(now())
  projectId        Int
  subprojectId     String
  uploadedById     Int
  project          Project    @relation(fields: [projectId], references: [id])
  subproject       SubProject @relation(fields: [subprojectId], references: [id])
  uploadedBy       User       @relation(fields: [uploadedById], references: [id])
}
